/*1 Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una variable y para qu√© sirve?
 Es un espacio reservado en memoria y sirve para almacenar datos.

¬øCu√°l es la diferencia entre declarar e inicializar una variable?
 Una variable se declara para especificar su nombre y sus caracter√≠sticas,
 y una variable se inicializa cuando le asignamos valores a dicha variable declarada. 

¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
 sumar es realizar una operaci√≥n matem√°tica, mientras que concatenar se agrupan valores ya sean n√∫meros y strings 

¬øCu√°l operador me permite sumar o concatenar?
 el operador de suma + */

/*2 Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
Nombre = String
Apellido = String
Nombre de usuario en Platzi = String
Edad = numero
Correo electr√≥nico = String
Mayor de edad = booleano
Dinero ahorrado = numero
Deudas = numero*/

/*3 Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
let nombre = "Antonio";
let apellidos = "Trinidad";
let nombreUsuarioPlatzi = "ambioristm";
let edad = 39;
let correoElectr√≥nico = "ambioristm@*****.com";
let mayorEdad = true;
let dineroAhorrado = 1000;
let deudas = 150;

4 Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
Dinero real (dinero ahorrado menos deudas)*/

/*const nombreCompleto = "Antonio " + "Trinidad Mercedes";
console.log(nombreCompleto);
let dineroReal = (dineroAhorrado - deudas);*/

//Funciones
/*1 Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una funci√≥n?
Las funciones nos permiten encapsular bloques de c√≥digo para reutilizarlos y ejecutarlos en el futuro.

1-Declarativas 
function miFuncion(aqui los parametros separados por comas){
  aqui tu codigo...;
}
para llamar la funcion:
miFuncion();

2-De expresion
var miFuncion = function(aqui los parametros separados por comas){
  aqui tu codigo...;
}
para llamar la funcion:
miFuncion();

¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
Cuando nesecitamos validar algo o reutilizar codigo.
tambien nos sirve para ordenar y mejorar la legibilidad de nuestro codigo.

¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
las funciones reciben parametros cuando las creamos,
y les enviamos los argumentos cuando las ejecutamos.
*/
/*2Ô∏è Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:

let name = "Antonio";
let lastname = "Trinidad Mercedes";
let completeName = name + lastname;
let nickname = "Ambioristm";

function presentarme(name, lastname, nickname){
  return console.log(`Mi nombre es  ${name} ${lastname},
    pero prefiero que me digas ${nickname}.`);
}
presentarme(name, lastname, nickname);

//console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

 1Ô∏è Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un condicional?
Es una regla que aplicamos para validar si algo es verdadero o falso y generar ciertas acciones.

¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
 existen condicionales if else if, switch, Con el condicional If podemos
 tener diferentes expresiones para evaluar dependiente del caso, y generar tantos If
 o else como sea necesario. Mientras que Switch case toma una sola expresi√≥n de entrada
 pero puede evaluar todos los casos como sea necesario de esa expresi√≥n de una forma m√°s ordenada.

¬øPuedo combinar funciones y condicionales? 
si. Las funciones pueden encapsular cualquier bloque de c√≥digo incluyendo condicionales. 

2Ô∏è Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:

const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}

if (tipoDeSuscripcion == "Free") {
  console.log ("Solo puedes tomar los cursos gratis");
} else if (tipoDeSuscripcion == "Basic") {
  console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
} else if (tipoDeSuscripcion == "Expert") {
  console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
} else if (tipoDeSuscripcion == "ExpertPlus") {
  console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
}

3Ô∏è Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).

function conseguirTipoSuscripcion(suscripcion) {
  if (suscripcion == "Free") {
  console.log ("Solo puedes tomar los cursos gratis");
  return;
  }
  if (suscripcion == "Basic") {
  console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
  return;
  }
  if (suscripcion == "Expert") {
  console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
  return;
  }
  if (suscripcion == "ExpertPlus") {
  console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
  return;
  }
  console.warn("Ese tipo de suscripcion no existe.")
}

conseguirTipoSuscripcion("Free");

Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè

const tiposDeSuscripciones = {
  free: "Solo puedes tomar los cursos gratis",
  basic: "Puedes tomar casi todos los cursos de Platzi durante un mes",
  expert: "Puedes tomar casi todos los cursos de Platzi durante un a√±o",
  expertPlus: "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"
}

function conseguirTipoSuscripcion(suscripcion) {
  if (tiposDeSuscripciones[suscripcion]) {
    console.log(tiposDeSuscripciones[suscripcion]);
    return;
  }
  console.warn("Ese tipo de suscripcion no existe.")
}

conseguirTipoSuscripcion("free");

Ciclos
1Ô∏è Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un ciclo?
Es la forma de ejecutar cierto bloque de codigo hasta que se cumpla cierta condici√≥n.

¬øQu√© tipos de ciclos existen en JavaScript?
while, for, do while.

¬øQu√© es un ciclo infinito y por qu√© es un problema?
Es cuando la validacion de nuestros condicionales nunca se cumple y bugueamos nuestro programa o aplicacion.

¬øPuedo mezclar ciclos y condicionales?
si, aunque los siclos son una especie de condicionales, nada nos impide agregar mas condicionales dentro del siclo.

2Ô∏è Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:

for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

let i = 0;

while (i < 5) {
  console.log("El valor de i es: " + i);
  i++;
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

while (i >= 2) {
  console.log("El valor de i es: " + i);
  i--;
}

3Ô∏è Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
üí° Pista: puedes usar la funci√≥n prompt de JavaScript.

let respuesta;

while (respuesta != '4') {
  let pregunta = prompt('¬øCu√°nto es 2 + 2?');
  respuesta = pregunta;
}

Listas
1Ô∏è Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un array?
Es una lista de elementos.

¬øQu√© es un objeto?
Es una lista de elementos pero cada elemento tiene un nombre clave.

¬øCu√°ndo es mejor usar objetos o arrays?
Arrays cuando lo que haremos en un elemento es lo mismo que en todos los demas,
(la regla se puede icumplir). mientras que un objeto cuando los nombres de cada elemento son importantes
para nuestro algoritmo.

¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
Si, los arrays pueden guardar objetos. Y los objetos pueden guardar arrays entre sus propiedades. 

2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

function imprimPrimerElemnt(arra){
  console.log(arra[0]);
}
imprimPrimerElemnt(['Jose', 'Ram√≥n', 'Miguel', 'Rosa']);

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

function imprimaElementPorElement(arra){
  for (let i = 0; i < arra.length; i++) {
    console.log(arra[i]);
  }
}
imprimaElementPorElement(['Jose', 'Ram√≥n', 'Miguel', 'Rosa']);


4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).

let obj = {
  Nombre: 'Antonio',
  Apellido: 'Trinidad',
  Nacionalidad: 'Dominicano'
}

function imprimaElementPorElementObjeto(obj){
  let arra = Object.values(obj);
  for (let i = 0; i < arra.length; i++) {
    console.log(arra[i]);
  }
}
imprimaElementPorElementObjeto(obj);

*/